# -*- encoding:utf-8 Mode: POLY-ORG; org-src-preserve-indentation: t; -*- ---
#+TITLE: Org-Babel support for evaluating q source code within .org documents
#+OPTIONS: toc:2
#+Startup: noindent
#+LATEX_HEADER: % copied from lstlang1.sty, to add new language support to Emacs Lisp.
#+LATEX_HEADER: \lstdefinelanguage{elisp}[]{lisp} {}
#+LATEX_HEADER: \lstloadlanguages{elisp}
#+PROPERTY: header-args :results silent
#+PROPERTY: literate-lang elisp
#+PROPERTY: literate-load yes

* Table of Contents                                            :TOC:noexport:
- [[#preparation][Preparation]]
  - [[#reference][reference]]
  - [[#load-dependencies][load dependencies]]
  - [[#string-to-indicate-that-evaluation-has-completed][String to indicate that evaluation has completed.]]
  - [[#optionally-define-a-file-extension-for-this-language][optionally define a file extension for this language]]
  - [[#optionally-declare-default-header-arguments][optionally declare default header arguments]]
- [[#code-block-body-expansion][Code Block Body Expansion]]
- [[#source-code-execution][Source Code Execution]]
  - [[#entrance-routine][entrance routine]]
  - [[#executing-without-a-session][Executing without a session]]
  - [[#session-based-evaluation][Session based evaluation]]
  - [[#how-to-show-result][How to show result]]
- [[#helpful-routines][helpful routines]]
  - [[#convert-an-elisp-var-into-a-string-of-q-source-code][Convert an elisp var into a string of q source code]]
  - [[#remove-duplicated-prompt-in-result][remove duplicated prompt in result]]
- [[#release-current-library][Release current library]]

* Preparation
** reference
- [[https://orgmode.org/worg/org-contrib/babel/intro.html#org0d774e6][Babel: Introduction]]
** load dependencies
#+BEGIN_SRC elisp
(require 'ob)
(require 'ob-ref)
(require 'ob-comint)
(require 'ob-eval)
(require 'q-mode)
(require 'helm-q)
#+END_SRC
** String to indicate that evaluation has completed.
#+BEGIN_SRC elisp
(defvar org-babel-q-eoe "\"org-babel-q-eoe\"" "String to indicate that evaluation has completed.")
#+END_SRC
** optionally define a file extension for this language
#+BEGIN_SRC elisp
(add-to-list 'org-babel-tangle-lang-exts '("q" . "q"))
#+END_SRC
** optionally declare default header arguments
#+BEGIN_SRC elisp
(defvar org-babel-default-header-args:q '())
#+END_SRC


* Code Block Body Expansion
If there are any predefined variables in =params=, we will add them in front of =body=.
#+BEGIN_SRC elisp
(defun org-babel-expand-body:q (body params)
  "Expand BODY according to PARAMS, return the expanded body.
Argument BODY: the code body
Argument PARAMS: the input parameters."
  (require 'q-mode)
  (let ((vars (cdr (assoc :vars params))))
    (concat
     (mapconcat ;; define any variables
      (lambda (pair)
        (format "%s=%S" (car pair) (org-babel-q-var-to-q (cdr pair))))
      vars "\n")
     "\n" body "\n")))
#+END_SRC
* Source Code Execution
** entrance routine
This is the main function which is called to evaluate a code block.

This function will evaluate the body of the source code and
return the results as emacs-lisp depending on the value of the
=:results= header argument

All header arguments specified by the user will be available in the =PARAMS= variable.
#+BEGIN_SRC elisp
(defun org-babel-execute:q (body params)
  "Execute a block of q code with org-babel.
This function is called by `org-babel-execute-src-block',
Argument BODY: the code body
Argument PARAMS: the input parameters."
  (let* (;; expand the body
         (full-body (org-babel-expand-body:q body params))
         (session-buffer (org-babel-prep-session:q (cdr (assoc :session params)) params))
         (raw-results (if session-buffer
                          (save-current-buffer
                            (org-babel-q-execute-in-session session-buffer full-body params))
                        (org-babel-q-execute-without-session full-body params))))
    (when session-buffer
      (org-babel-when-in-src-block
       (let ((another-win (if (one-window-p)
                              (if (> (window-width) 100)
                                  (split-window-horizontally)
                                (split-window-vertically))
                            (next-window))))
         (with-current-buffer session-buffer
           (goto-char (point-max)))
         (set-window-buffer another-win session-buffer))))
    (when raw-results
      (org-babel-transfer-results:q raw-results params))))
#+END_SRC
** Executing without a session
We will create a temporary file to hold the code body then send it to a new q process created by [[https://github.com/psaris/q-mode/blob/master/q-mode.el#L113][q-program]].
#+BEGIN_SRC elisp
(defun org-babel-q-execute-without-session (full-body params)
  "Execute code body without a session.
Argument FULL-BODY: the expanded code body
Argument PARAMS: the input parameters."
  (let* ((stdin-file (org-babel-temp-file "q-stdin-")))
    (with-temp-file stdin-file
      (insert full-body))
    (with-temp-buffer
      (call-process-shell-command q-program stdin-file (current-buffer))
      (buffer-string))))
#+END_SRC
** Session based evaluation
*** initialization
The initialization will try to return a Q-Shell buffer created by [[https://github.com/psaris/q-mode/][q-mode]] based on parameter =session=.
**** if session has no name
We will try to use [[https://github.com/psaris/q-mode/blob/master/q-mode.el#L220][current active buffer]] if it exists,
otherwise we will create a new active buffer via [[https://github.com/emacs-q/helm-q.el][helm-q]].
#+BEGIN_SRC elisp
(defun org-babel-q-initiate-session-without-name ()
  "Handle condition when no session name."
  ;; try to use current `q-active-buffer'.
  (if (and q-active-buffer
           (process-live-p (get-buffer-process q-active-buffer)))
    q-active-buffer
    (let ((helm-candidate-separator " ")
          (helm-q-pass-required-p (and current-prefix-arg t)))
      (helm :sources (helm-make-source "helm-q" 'helm-q-source)
            :prompt "Please select a connection for current session: "
            :buffer "*helm q*"))
    q-active-buffer))
#+END_SRC
**** if session has a valid name
We will try to find out any matched Q-Shell buffer and return it,
otherwise we will try to create a new active buffer via [[https://github.com/emacs-q/helm-q.el][helm-q]] with this name to filter out available servers.
***** find out matched instances from helm-q based on session name
#+BEGIN_SRC elisp
(defun org-babel-q-search-helm-q-instances (session-name)
  "Search session-name in helm-q list.
Argument SESSION-NAME: session name."
  (let* ((helm-current-source (helm-make-source "helm-q" 'helm-q-source))
         (candidates (progn (funcall (helm-attr 'init))
                            (helm-attr 'candidates))))
    (cl-loop for (nil . instance) in candidates
             for session-name-for-instance = (helm-q-shell-buffer-id instance)
             if (string= session-name-for-instance session-name)
             collect instance)))
#+END_SRC
***** find out running Q-Shell buffer based on session name
#+BEGIN_SRC elisp
(defun org-babel-q-find-running-session (session-name)
  "Find out running session.
Argument SESSION-NAME: the session name."
  (loop with q-session-buffer-name = (format "*q-%s*" session-name)
        with helm-q-session-buffer-name = (helm-q-shell-buffer-name session-name)
        for buffer in (buffer-list)
        for buffer-name = (buffer-name buffer)
        if (with-current-buffer buffer
             (and (equal 'q-shell-mode major-mode)
                  (or (string= q-session-buffer-name buffer-name)
                      (string= helm-q-session-buffer-name buffer-name))))
        return buffer-name))
#+END_SRC
***** create a local Q-Shell buffer if no match
When we want to create a local buffer with a special session name, we have to change the behavior to return a shell name
by original function =q-shell-name=, to add session name as part of the buffer name.
The current session name will be stored in a special varaible.
#+BEGIN_SRC elisp
(defvar ob-q-current-session-name nil)
(defun q-shell-name-for-ob-q (orig-fun &rest args)
  "Add session name to q shell buffer.
Argument ORIG-FUN: original function.
Argument ARGS: original arguments."
  (if ob-q-current-session-name
    (format "q-%s" ob-q-current-session-name)
    (apply orig-fun args)))
(advice-add 'q-shell-name :around #'q-shell-name-for-ob-q)
#+END_SRC

The routine to create a local Q-Shell buffer
#+BEGIN_SRC elisp
(defun org-babel-q-create-local-q-shell-for-session (session-name)
  "Create Local Q Shell buffer for a session.
Argument SESSION-NAME: the session name."
  (let ((ob-q-current-session-name session-name))
    (call-interactively 'q))
  q-active-buffer)
#+END_SRC


***** main routine
#+BEGIN_SRC elisp
(cl-defun org-babel-q-initiate-session-by-name (session-name)
  "Handle condition when there is a valid session name.
Argument SESSION-NAME: the session name."
  (let ((running-session (org-babel-q-find-running-session session-name)))
    (when running-session
      (return-from org-babel-q-initiate-session-by-name running-session)))

  (let ((matched-instances (org-babel-q-search-helm-q-instances session-name)))
    (case (length matched-instances)
      (0 (org-babel-q-create-local-q-shell-for-session session-name))
      (1 (helm-q-source-action-qcon (car matched-instances))
         q-active-buffer)
      (t
       (let ((helm-candidate-separator " ")
             (helm-q-pass-required-p (and current-prefix-arg t)))
         (helm :sources (helm-make-source "helm-q" 'helm-q-source
                          :instance-list #'(lambda () (helm-q-instance-list matched-instances)))
               :prompt "Multiple matches found for session name, please choose one:  "
               :buffer "*helm q*"))
       q-active-buffer))))
#+END_SRC
**** entrance of initialization
This routine can be invoked by Emacs Lisp function =org-babel-initiate-session=.
#+BEGIN_SRC elisp
(defun org-babel-q-initiate-session (session params)
  "Return the initialized session buffer.
Argument SESSION: the session name.
Argument PARAMS: the parameters for code block."
  (save-current-buffer
    (let* ((session-list (assoc :session params))
           (session (if session-list
                      (cdr session-list)
                      ;; default value for `:session', not depending on `org-babel-default-header-args'.
                      "none")))
      (cond ((null session)
             (org-babel-q-initiate-session-without-name))
            ((string= "none" session)
             nil)
            (t (org-babel-q-initiate-session-by-name session))))))
#+END_SRC
*** prepare
This routine can be invoked by Emacs Lisp function =org-babel-initiate-session=.
#+BEGIN_SRC elisp
(defun org-babel-prep-session:q (session params)
  "Prepare SESSION according to the header arguments specified in PARAMS.
Arguments SESSION: the session name.
Arguments PARAMS: the input parameters."
  (org-babel-q-initiate-session session params))
#+END_SRC
*** execute
#+BEGIN_SRC elisp
(defun org-babel-q-execute-in-session (session-buffer full-body params)
  "Execute code body in a session.
Argument SESSION-BUFFER: the session associated buffer.
Argument FULL-BODY: the expanded code body
Argument PARAMS: the input parameters."
  (let* ((start-position (with-current-buffer session-buffer
                           (point-max)))
         (results-list
           (org-babel-comint-with-output
               (session-buffer org-babel-q-eoe t full-body)
             (dolist (code (list full-body org-babel-q-eoe))
               (insert (org-babel-chomp code))
               (comint-send-input t t)))))
    (org-babel-q-remove-eoe session-buffer start-position)
    (org-babel-q-remove-prompts-in-result session-buffer results-list)))
#+END_SRC
*** remove eoe indicator lines
#+BEGIN_SRC elisp
(defun org-babel-q-remove-eoe (session-buffer start-position)
  "Remove eoe lines.
Argument SESSION-BUFFER: the session buffer.
Argument START-POSITION: the start position to remove."
  (with-current-buffer session-buffer
    (save-excursion
      (goto-char start-position)
      (while (search-forward org-babel-q-eoe nil t)
        (replace-match "")
        (when (= (line-beginning-position) (line-end-position))
          (delete-line))))))
#+END_SRC

** How to show result
Please note that if [[https://orgmode.org/manual/Results-of-Evaluation.html][result]] type is =value=, we will only collect the last valid output line as results.
#+BEGIN_SRC elisp
(defun org-babel-transfer-results:q (results params)
  "Convert raw results to Emacs Lisp Result.
This function is called by `org-babel-execute-src-block',
Argument RESULTS: the raw results.
Argument PARAMS: the input parameters."
  (let ((result-params (cdr (assq :result-params params)))
        (results (string-trim results)))
    (when (eq 'value (cdr (assq :result-type params)))
      (setf results (car (last (split-string results "[\n\r]+")))))
    (org-babel-result-cond result-params
      results
      (let ((tmp-file (org-babel-temp-file "q-")))
        (with-temp-file tmp-file (insert results))
        (org-babel-import-elisp-from-file tmp-file)))))
#+END_SRC
* helpful routines
** Convert an elisp var into a string of q source code
#+BEGIN_SRC elisp
(defun org-babel-q-var-to-q (var)
  "Convert an var into q source code to specify it with the same value.
Argument VAR: a q varaible."
  (format "%S" var))
#+END_SRC
** remove duplicated prompt in result
The =comint-prompt-regexp= may got printed for many times in the start of one line,
we have to remove them in the results.
We will also convert the =results-list= into a string containing the results.
#+BEGIN_SRC elisp
(defun org-babel-q-remove-prompts-in-result (session-buffer results-list)
  "Remove duplicated prompts in result.
Argument SESSION-BUFFER: the session associated buffer.
Argument RESULTS-LIST: the list of result string."
  (let ((prompt-regexp-to-remove (with-current-buffer session-buffer
                                   comint-prompt-regexp)))
    (with-output-to-string
      (cl-loop for text in results-list
               until (string-match org-babel-q-eoe text)
               do (while (string-match prompt-regexp-to-remove text)
                    (setf text (replace-match "" nil nil text)))
               (princ text)))))
#+END_SRC
* Release current library
And when a new version of [[./ob-q.el]] can release from this file,
the following code should execute.
#+BEGIN_SRC elisp :load no
(literate-elisp-tangle
 "ob-q.org"
 :header ";;; ob-q.el --- A library to manage remote q sessions with Helm and q-mode  -*- lexical-binding: t; -*-

;; URL: https://github.com/emacs-q/ob-q.el
;; Package-Requires: ((emacs \"26.1\") (cl-lib \"0.6\") (org \"9.3\") (q-mode \"0.1\") (cl-lib \"1.0\"))

;;; Requirements:

;; ob-q requires the installation of program q and qcon, and additional q-mode.el for session support and optional helm-q.el
;; for a better session management interface.

;;; Commentary:

;; ob-q is an Emacs Lisp library to provide Org-Babel support for evaluating q source code within .org documents.
"
                 :tail "(provide 'ob-q)
;;; ob-q.el ends here
")
#+END_SRC
